#!/usr/bin/env node
import{exec as h}from"child_process";var a={APPROVED:"\x1B[32mAPPROVED\x1B[0m",CHANGES_REQUESTED:"\x1B[31mCHANGES_REQUESTED\x1B[0m",CURRENT:"\x1B[34mCURRENT\x1B[0m",STANDING:"\x1B[34mSTANDING\x1B[0m",OUTDATED:"\x1B[33mOUTDATED\x1B[0m",REQUESTED:"\x1B[90mREQUESTED\x1B[0m",COMMENTED:"\x1B[90mCOMMENTED\x1B[0m"};var u={1:"\x1B[42m",0:"\x1B[41m",2:"\x1B[43m",3:"\x1B[45m",4:"\x1B[100m"};var i="rutmanz";var n=class{user;state;stale=!1;requested=!1;lastUpdate=0;constructor(t){this.user=t}getStateString(){let t="";return this.state&&this.state!="COMMENTED"?(t+=a[this.requested?"OUTDATED":this.stale?"STANDING":"CURRENT"].padEnd(25),t+=a[this.state]):this.requested&&(t+=a.REQUESTED.padEnd(25)),this.state=="COMMENTED"&&(t=t+a.COMMENTED+"\x1B[34m\x1B[0m"),t}toString(){let t=this.user.padEnd(18," ");return this.user==i&&(t=`\x1B[35m${t}\x1B[35m`),t+=this.getStateString(),t}get waitingOnAuthor(){return this.state=="CHANGES_REQUESTED"&&!this.requested}get isMine(){return this.user==i}};var E=class{data;reviewMap;constructor(t){this.data=t}get createdAt(){return new Date(this.data.createdAt)}get isMine(){return this.data.author.login==i}reviewFrom(t){return this.reviewMap[t]??=new n(t),this.reviewMap[t]}get reviews(){return Object.values(this.reviewMap)}get waitingOnAuthor(){return this.reviews.some(t=>t.waitingOnAuthor)}get myReview(){return this.reviews.find(t=>t.isMine)}get needsMyReview(){return this.myReview?.requested??!1}get reviewDecision(){return!this.waitingOnAuthor&&this.data.reviewDecision=="CHANGES_REQUESTED"?2:this.needsMyReview?3:this.data.isDraft?4:this.data.reviewDecision=="APPROVED"?1:this.data.reviewDecision=="CHANGES_REQUESTED"?0:2}get ciStatus(){return this.data.statusCheckRollup.some(t=>t.status=="COMPLETED"&&t.conclusion=="FAILURE")?1:this.data.statusCheckRollup.some(t=>t.status=="PENDING")?2:0}get prettyCiStatus(){switch(this.ciStatus){case 0:return"\x1B[32mPASSING\x1B[0m";case 1:return"\x1B[31mFAILING\x1B[0m";case 2:return"\x1B[33mPENDING\x1B[0m"}}get mergabilityStatus(){switch(this.data.mergeStateStatus){case"DIRTY":return 0;case"BEHIND":return 1;case"BLOCKED":return 2;default:return 2}}get prettyMergabilityStatus(){switch(this.mergabilityStatus){case 0:return"\x1B[31mCONFLICTS\x1B[0m";case 1:return"\x1B[34mBEHIND\x1B[0m";case 2:return"\x1B[32mCLEAN\x1B[0m"}}get prettyTitle(){return`${u[this.reviewDecision]} ${this.data.author.login==i?"\x1B[1m\u2B50\uFE0E":""}${this.data.number} | ${this.data.title} \x1B[0m`}get simpleTitle(){return`#${this.data.number} | ${this.data.title}`}processReviews(){this.reviewMap={},this.data.reviewRequests.forEach(t=>{t.__typename=="User"&&(this.reviewFrom(t.login).requested=!0)}),this.data.reviews.forEach(t=>{if(!(this.reviewMap[t.author.login]!=null&&this.reviewMap[t.author.login].lastUpdate>new Date(t.submittedAt).getTime())&&(t.state!="COMMENTED"||this.reviewMap[t.author.login]==null)){let s=this.reviewFrom(t.author.login);s.state=t.state,s.stale=t.commit.oid!=this.data.headRefOid,s.lastUpdate=new Date(t.submittedAt).getTime()}})}};h("gh pr list --json author,reviews,number,state,headRefOid,reviewRequests,title,updatedAt,createdAt,reviewDecision,mergeStateStatus,statusCheckRollup,state,mergedAt,isDraft,closedAt --draft=false --state open",(o,t,s)=>{if(o){console.error(`Error executing command: ${o.message}`);return}s&&console.error(`Command stderr: ${s}`);let m=JSON.parse(t.toString()).map(e=>new E(e));m.sort((e,r)=>e.createdAt.getTime()-r.createdAt.getTime()).sort((e,r)=>(e.isMine?1:0)-(r.isMine?1:0)).forEach(e=>{e.processReviews(),console.log(e.prettyTitle),console.log("  "+e.prettyMergabilityStatus+"  "+e.prettyCiStatus),e.reviews.sort((r,l)=>l.lastUpdate-r.lastUpdate).forEach(r=>console.log("    "+r.toString()))}),console.log(`
====== MY REVIEWS =======`),m.filter(e=>e.myReview!=null).map(e=>{console.log(e.myReview.getStateString().padEnd(52," ")+`\x1B[35m#${e.simpleTitle}\x1B[0m`)}),console.log(`
====== MY PRS =======`),m.filter(e=>e.isMine).map(e=>{console.log(`${e.prettyTitle} ${e.prettyMergabilityStatus} ${e.prettyCiStatus}`)})});
